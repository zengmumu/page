<?xml version="1.0" encoding="utf-8"?>
<document>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8786]]></url>
<title>输入某年某月某日，判断</title>
<date>2019-07-30</date>
<content>import datetime def dayofyear(): year = input("请输入年份：") month = input("请输入月份：") day = input("请输入天：") date1 = datetime.date(year...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8785]]></url>
<title>python 里面如何生成随机数</title>
<date>2019-07-30</date>
<content>在 Python 中用于生成随机数的模块是 random，在使用前需要 import. 如下例子可以酌情列举：random.random()：生成一个 0-1 之间的随...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8780]]></url>
<title>补充缺失的代码？</title>
<date>2019-07-30</date>
<content>def print_directory_contents(sPath): """ 这个函数接收文件夹的名称作为输入参数 返回该文件夹中文件的路径 以及其包含文件夹中文...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8778]]></url>
<title>现在考虑有一个 jsonline 格</title>
<date>2019-07-30</date>
<content>之前处理文件的代码如下所示 def get_lines(): l = [] with open(‘file.txt’，‘rb’) as f: for eachline in f: l.append(eachline) return l if __na...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8773]]></url>
<title>阅读下面的代码，写出 </title>
<date>2019-07-30</date>
<content>pre class="brush:python"> A0 = dict(zip(('a'，'b'，'c'，'d'，'e')，(1，2，3，4，5))) A1 = range(10) A2 = [i for i in A1 if i in A0] A3 = [A0[s] for s in...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8801]]></url>
<title>你所遵循的代码规范是什</title>
<date>2019-07-30</date>
<content>5. 关于参数 5.1 不要用断言来实现静态类型检测。断言可以用于检查参数，但不应仅仅是进行静态类型检测。Python 是动态类型...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8800]]></url>
<title>你所遵循的代码规范是什</title>
<date>2019-07-29</date>
<content>1. 变量 常量：大写加下划线 USER_CONSTANT。 私有变量 : 小写和一个前导下划线 _private_value。Python 中不存在私有变量一说，若是...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/pythontiku/jichuyufa/2019/0729/8799.html]]></url>
<title>什么是 Python 的命名空间？</title>
<date>2019-07-29</date>
<content>在 Python 中，所有的名字都存在于一个空间中，它们在该空间中存在和被操作——这就是命名空间。 它就好像一个盒子，每一...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8798]]></url>
<title>什么是 Python 自省？</title>
<date>2019-07-29</date>
<content>Python 自省是 Python 具有的一种能力，使程序员面向对象的语言所写的程序在运行时,能够获得对象的类 Python 型。Python 是一种...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8797]]></url>
<title> 什么是 Python？</title>
<date>2019-07-29</date>
<content>-Python 是一种编程语言，它有对象、模块、线程、异常处理和自动内存管理，可以加入其他语言的对比。 -Python 是一种解释型...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8796]]></url>
<title>Python 中的作用域？</title>
<date>2019-07-29</date>
<content>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定。当 Python 遇到一个变量的话它会按照这的顺序进行搜索：...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8795]]></url>
<title>关于 Python 程序的运行方面</title>
<date>2019-07-29</date>
<content>1、使用多进程，充分利用机器的多核性能 2、对于性能影响较大的部分代码，可以使用 C 或 C++编写 3、对于 IO 阻塞造成的性...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8794]]></url>
<title>Python2 与 Python3 的区别（二</title>
<date>2019-07-29</date>
<content>3) 修改类差异 1. 浮点数除法操作符“/”和“//”的区别 “ / ”： Python2：若为两个整形数进行运算，结果为整形，但若两个...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8793]]></url>
<title>Python2 与 Python3 的区别（一</title>
<date>2019-07-29</date>
<content>1) 核心类差异 1. Python3 对 Unicode 字符的原生支持。 Python2 中使用 ASCII 码作为默认编码方式导致 string 有两种类型 str 和 unico...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8792]]></url>
<title>Python 是如何进行类型转换</title>
<date>2019-07-29</date>
<content>内建函数封装了各种转换函数，可以使用目标类型关键字强制类型转换，进制之间的转换可以用int(‘str’，base=’n’)将特定...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8791]]></url>
<title> Python 中有日志吗?怎么使</title>
<date>2019-07-29</date>
<content>有日志。 Python 自带 logging 模块，调用 logging.basicConfig()方法，配置需要的日志等级和相应的参数，Python 解释器会按照配置的...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8790]]></url>
<title>谈一下什么是解释性语言</title>
<date>2019-07-29</date>
<content>计算机不能直接理解高级语言，只能直接理解机器语言，所以必须要把高级语言翻译成机器语言，计算机才能执行高级语言编...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8789]]></url>
<title> Python 是强语言类型还是弱</title>
<date>2019-07-29</date>
<content>python 是强类型的动态脚本语言。 强类型： 不允许不同类型相加。 动态： 不使用显示数据类型声明，且确定一个变量的类型...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8788]]></url>
<title>模块和包是什么</title>
<date>2019-07-29</date>
<content>在 Python 中，模块是搭建程序的一种方式。每一个 Python 代码文件都是一个模块，并可以引用 其他的模块，比如对象和属性。...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8787]]></url>
<title>打乱一个排好序的 list 对</title>
<date>2019-07-29</date>
<content>import randomrandom.shuffle(alist)...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8784]]></url>
<title>__init__ 和__new__的区别</title>
<date>2019-07-29</date>
<content>init 在对象创建后，对对象进行初始化。 new 是在对象创建之前创建一个对象，并将该对象返回给 init。...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8783]]></url>
<title>赋值、浅拷贝和深拷贝的</title>
<date>2019-07-29</date>
<content>一、赋值 在 Python 中，对象的赋值就是简单的对象引用，这点和 C++不同，如下所示： a = [1,2,"hello",['python', 'C++']]b = a 在上述...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8782]]></url>
<title>常用的 Python 标准库都有哪</title>
<date>2019-07-29</date>
<content>os 操作系统，time 时间，random 随机，pymysql 连接数据库，threading 线程，multiprocessing进程，queue 队列。 第三方库： django 和 f...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8781]]></url>
<title>在except中return后还会不会</title>
<date>2019-07-29</date>
<content>会继续处理 finally 中的代码；用 raise 方法可以抛出自定义异常。 except: #捕获所有异常 except: 异常名: #捕获指定异常 except:异...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8779]]></url>
<title>read、readline 和 readlines 的</title>
<date>2019-07-29</date>
<content>read:读取整个文件。 readline：读取下一行，使用生成器方法。 readlines：读取整个文件到一个迭代器以供我们遍历...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8777]]></url>
<title>4G 内存怎么读取一个 5G 的</title>
<date>2019-07-29</date>
<content>方法一： 可以通过生成器，分多次读取，每次读取数量相对少的数据（比如 500MB）进行处理，处理结束后在读取后面的 500...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8776]]></url>
<title>以下 Python 程序的输出？</title>
<date>2019-07-29</date>
<content>for i in range(5，0，-1):print(i)...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8775]]></url>
<title>考虑以下 Python 代码，如果</title>
<date>2019-07-29</date>
<content>l = [] for i in xrange(10): l.append({‘num’:i}) print l 再考虑以下代码，运行结束后的结果是什么？ l = [] a = {‘num’:0} for i in xrange...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8774]]></url>
<title> range 和 xrange 的区别？</title>
<date>2019-07-29</date>
<content>两者用法相同，不同的是 range 返回的结果是一个列表，而 xrange 的结果是一个生成器，前者是直接开辟一块内存空间来保存列...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8772]]></url>
<title> 简述你对 input()函数的理</title>
<date>2019-07-29</date>
<content>在 Python3 中，input()获取用户输入，不论用户输入的是什么，获取到的都是字符串类型的。 在 Python2 中有 raw_input()和 input(),...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8771]]></url>
<title>面这段代码的输出结果将</title>
<date>2019-07-29</date>
<content>class Parent(object) x = 1 class Child1(Parent): pass class Child2(Parent): pass print Parent.x, Childx, Childx Childx = 2 print parent.x, Childx, Childx parent....</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8770]]></url>
<title>print 调用 Python 中底层的什</title>
<date>2019-07-29</date>
<content>print 方法默认调用 sys.stdout.write 方法，即往控制台打印字符串。...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8769]]></url>
<title>a=1,b=2,不用中间变量交换</title>
<date>2019-07-29</date>
<content>方法一： a = a+bb = a-ba = a-b 方法二： a = a^b b =b^a a = a^b 方法三： a,b = b,a...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8768]]></url>
<title>代码中要修改不可变数据</title>
<date>2019-07-29</date>
<content>代码不会正常运行，抛出 TypeError 异常。...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8762]]></url>
<title>基本注意事项</title>
<date>2019-07-29</date>
<content>（1）要谦虚谨慎。 面试和面谈的区别之一就是面试时对方往往是多数人，其中不乏专家、学者，求职者在回答一些比较有深...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8767]]></url>
<title>面试九忌（二）</title>
<date>2019-07-29</date>
<content>（5）忌提问幼稚。 在想考官提问时要考虑自己提的问题是否有价值或者主考官已经回答过或解释过。 千万别提一些很幼稚的...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8766]]></url>
<title>面试九忌（一）</title>
<date>2019-07-29</date>
<content>（1）忌握手无力，过于靠近面试官。 时与主试者应恰如其分地轻轻一握，不要有气无力地被动握手，给对方一种精力不足，...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8764]]></url>
<title>面试时应注意的礼仪(一</title>
<date>2019-07-29</date>
<content>（1）服饰要得体。 就服饰而言，应聘者在去求职面试前，必须精心选择自己的服饰。那就是服饰要与自己的身材、身份相符...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/mianshibaodian/mianshizhongzhuyidewenti/2019/0729/8765.html]]></url>
<title>面试时应注意的礼仪（二</title>
<date>2019-07-29</date>
<content>（6）“听”的学问。 首先，要耐心。对对方提起的任何话题，你都应耐心倾听，不能表现出心不在焉或不耐烦的神色，要尽...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8763]]></url>
<title>面试时如何消除紧张感</title>
<date>2019-07-29</date>
<content>由于面试成功与否关系到求职者的前途，所以大学生面试时往往容易产生紧张情绪，有的大学生可能还由于过度紧张导致面试...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/mianshibaodian/renshimianshijiqiao/2019/0727/8723.html]]></url>
<title>在五年的时间内，你的职</title>
<date>2019-07-27</date>
<content>回答提示：一般公司高管或者副总喜欢问个人职业规划方面的问题。当然，说出其他一些你感兴趣的职位也是可以的，比如产...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8721]]></url>
<title>你对加班的看法？</title>
<date>2019-07-27</date>
<content>回答提示：实际上好多公司问这个问题，并不证明一定要加班，只是想测试你是否愿意为公司奉献。回答样本：如果是工作需...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8719]]></url>
<title>你觉得你最大的优点是什</title>
<date>2019-07-27</date>
<content>回答提示：沉着冷静、条理清楚、立场坚定、顽强向上、乐于助人和关心他人、适应能力和幽默感、乐观和友爱。我在之前的...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8761]]></url>
<title>主管领导说是他做的，你</title>
<date>2019-07-27</date>
<content>如果你做的一项工作受到上级领导的表扬，但你主管领导却说是他做的，你该怎样？ 回答提示：/h3> 我首先不会找那位上级领...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8760]]></url>
<title>工作出现失误给本公司造</title>
<date>2019-07-27</date>
<content>①我本意是为公司努力工作，如果造成经济损失，我认为首要的问题是想方设法去弥补或挽回经济损失。如果我无能力负责，...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8759]]></url>
<title>意见与领导不一致</title>
<date>2019-07-27</date>
<content>在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？ 回答提示： ①原则上我会尊...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8758]]></url>
<title>上班后发现工作不合适</title>
<date>2019-07-27</date>
<content>工作一段时间后发现工作不适合你，有两种情况： ①如果你确实热爱程序员这个职业，那你就要不断学习，虚心向领导和同...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8757]]></url>
<title>工作中你难以和同事、上</title>
<date>2019-07-27</date>
<content>①我会服从领导的指挥，配合同事的工作。 ②我会从自身找原因，仔细分析是不是自己工作做得不好让领导不满意，同事看...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8756]]></url>
<title>谈谈你过去的工作中，最</title>
<date>2019-07-27</date>
<content>这是针对求职者提出的问题，建议此时可以配合面试工作的特点作为主要依据来回答，如业务工作需要与人沟通，便可举出之...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8755]]></url>
<title>谈谈你做过的项目？</title>
<date>2019-07-27</date>
<content>举一个你最有把握的例子，把来龙去脉说清楚，而不要说了很多却没有重点。 切忌夸大其词，把别人的功劳到说成自己的，...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8754]]></url>
<title>如果你在这次面试中没有</title>
<date>2019-07-27</date>
<content>回答提示： 现在的社会是一个竞争的社会，从这次面试中也可看出这一点，有竞争就必然有优劣，有成功必定就会有失败。...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8753]]></url>
<title>&lt;h3&gt;回答提示：&lt;/h</title>
<date>2019-07-27</date>
<content>假如你工作经验欠缺（是以应届生的身份工作），如何能胜任这项工作？ 回答提示： ①如果招聘单位对应届毕业生的应聘者...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8752]]></url>
<title>与上级意见不一致时，你</title>
<date>2019-07-27</date>
<content>回答提示： 避免把“离职原因”说得太详细、太具体。尽量说原单位给你带来的提升，体现出感恩的心态，而不能抱怨公司...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8751]]></url>
<title> 回答</title>
<date>2019-07-27</date>
<content>回答提示： ①通过应聘者对上级的“希望”可以判断出应聘者对自我要求的意识，这既上一个陷阱，又是一次机会。 ②最好...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8750]]></url>
<title>如果我录用你，你将怎样</title>
<date>2019-07-27</date>
<content>h3>回答提示： ①如果应聘者对于应聘的职位缺乏足够的了解，最好不要直接说出自己开展工作的具体办法。 ②可以尝试采用...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8749]]></url>
<title>对这项工作，你有哪些可</title>
<date>2019-07-27</date>
<content>回答提示： ①不宜直接说出具体的困难，否则可能令对方怀疑应聘者不行。 ②可以尝试迂回战术，说出应聘者对困难所持有...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8748]]></url>
<title>想过创业吗？</title>
<date>2019-07-27</date>
<content>这个问题可以显示你的冲劲，但如果你的回答是“有”的话，千万小心，下一个问题可能就是：那么为什么你不这样做呢？而...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8747]]></url>
<title>你做过的哪件事最令自己</title>
<date>2019-07-27</date>
<content>这是考官给你的一个机会，让你展示自己把握命运的能力。 这会体现你潜在的领导能力以及你被提升的可能性。 记住：你的...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8746]]></url>
<title>你和别人发生过争执吗？</title>
<date>2019-07-27</date>
<content>这是面试中最险恶的问题，其实是考官布下的一个陷阱，千万不要说任何人的过错，应知成功解决矛盾是一个协作团体中成员...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8745]]></url>
<title>你为什么愿意到我们公司</title>
<date>2019-07-27</date>
<content>对于这个问题，你要格外小心，如果你已经对该单位作了研究，你可以回答一些详细的原因，像“公司本身的高技术开发环境...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8744]]></url>
<title>眼下你生活中最重要的是</title>
<date>2019-07-27</date>
<content>对我来说，能在这个领域找到工作是最重要的，能在公司任职对我说最重要。...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8743]]></url>
<title>什么会让你有成就感？</title>
<date>2019-07-27</date>
<content>为公司竭力效劳，尽我所能，完成一个项目，并且能提出自己的创新想法。...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8742]]></url>
<title>怎样对待自己的失敗？</title>
<date>2019-07-27</date>
<content>我认为失败不是坏事，一件事情没有成功肯定是我做的地方有不是，我觉得能积极面对失败并总结经验成功就指日可待。...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8741]]></url>
<title>你通常如何处理別人的批</title>
<date>2019-07-27</date>
<content>①沈默是金，不必说什么，否则情况更糟，不过我会接受建设性的批评。 ②我会等大家冷靜下来再讨论，反思自己是否有这...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8740]]></url>
<title>就你申请的这个职位，你</title>
<date>2019-07-27</date>
<content>企业喜欢问求职者弱点，他们希望看到这样的求职者：继续重复自己的优势，然后说：“对于这个职位和我的能力来说，我相...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8739]]></url>
<title>对工作的期望与目标何在</title>
<date>2019-07-27</date>
<content>就是职业规划的另一种问法，也是公司在以后培养你的方向上的选择。 可以提一些具体的想法和做法。让上级认为你之前考...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8738]]></url>
<title>喜欢这份工作的哪一点？</title>
<date>2019-07-27</date>
<content>每个人的价值观不同，自然评断的标准也会不同， 但是，在回答面试官这个问题时可不能太直接就把自己心理的话说出来，...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8737]]></url>
<title>你怎么理解PHP这个职位？</title>
<date>2019-07-27</date>
<content>把岗位职责和任务及工作态度阐述一下，更多的说PHP发展和优势以及你学习PHP的原因。 比如：PHP语言上的应用发展，PHP最大...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8736]]></url>
<title>作为被面试者请你给我打</title>
<date>2019-07-27</date>
<content>试着列出四个优点和一个非常非常非常小的缺点（可以抱怨一下设施，没有明确责任人的缺点是不会有人介意的）。...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8735]]></url>
<title>你的业余爱好是什么？</title>
<date>2019-07-27</date>
<content>找一些富于团体合作精神的，这里有一个真实的故事：有人被否决掉，因为他的爱好是深海潜水。主考官说：因为这是一项单...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8734]]></url>
<title>怎样看待学历和能力？</title>
<date>2019-07-27</date>
<content>学历不一定完全代表能力，虽然我的学历不够硬但是我会在技术上更努力更认真，并在短期内发挥自己的优势，把公司项目做...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8733]]></url>
<title>你能为我们公司带来什么</title>
<date>2019-07-27</date>
<content>①假如你可以的话，试着告诉他们你可以减低他们的培养费用——“我已经接有过X年工作经验，立刻就可以上岗工作”。 ②...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8732]]></url>
<title>请说出你选择这份工作的</title>
<date>2019-07-27</date>
<content>这是想知道面试者对这份工作的热忱及理解度，并筛选因一时兴起而来应试的人，如果是无经验者，可以强调“就算职种不同...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8731]]></url>
<title>说说你对我们公司了解多</title>
<date>2019-07-27</date>
<content>在去公司面试前上网查一下该公司主营业务（公司官网、百度-新闻、招聘网站）或者向公司内的学长咨询（向就业专员要电...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8730]]></url>
<title>领导肯定,同事孤立怎么看</title>
<date>2019-07-27</date>
<content>假设你在某单位工作，成绩比较突出，得到领导的肯定。但同时你发现同事们越来越孤立你，你怎么看这个问题？你准备怎么...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8729]]></url>
<title>你来我们公司做前端可以</title>
<date>2019-07-27</date>
<content>面试者在考验面试者是否对所述职位专一时，如果面试者过多表现在前端上的技能，那面试官就会用这个问题问你，如果你回...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8728]]></url>
<title>谈谈如何适应新的工作环</title>
<date>2019-07-27</date>
<content>①办公室里每个人有各自的岗位与职责，不得擅离岗位。 ②根据领导指示和工作安排，制定工作计划，提前预备，并按计划...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8727]]></url>
<title>谈谈你对跳槽的看法？</title>
<date>2019-07-27</date>
<content>①我认为跳槽应该是进入到更好的企业和更大的平台，而不是在公司待几个月就认为公司同事关系不好，自己发展有瓶颈就跳...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8726]]></url>
<title>你对薪资的要求？</title>
<date>2019-07-27</date>
<content>回答提示：如果你对薪酬的要求太低，那显然贬低自己的能力； 如果你对薪酬的要求太高，那又会显得你分量过重，公司受...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8725]]></url>
<title>你还有什么要问我的吗？</title>
<date>2019-07-27</date>
<content>回答提示：企业的这个问题看上去可有可无，其实很关键，企业不喜欢说“没问题”的人，因为其很注重员工的个性和创新能...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8724]]></url>
<title>你的朋友是如何评价你的</title>
<date>2019-07-27</date>
<content>回答提示：一般公司高管或者副总喜欢问个人职业规划方面的问题。当然，说出其他一些你感兴趣的职位也是可以的，比如产...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8722]]></url>
<title>如何安排自己的时间？会</title>
<date>2019-07-27</date>
<content>回答提示：基本上，如果上班工作有效率，工作量合理的话，应该不太需要加班。可是我也知道有时候很难避免加班，加上现...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8720]]></url>
<title>说说你最大的缺点？</title>
<date>2019-07-27</date>
<content>回答提示：这个问题企业问的概率很大，通常不希望听到直接回答的缺点是什么，如果求职者说自己有强迫症、爱忌妒人、非...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8718]]></url>
<title>请你做一下自我介绍？</title>
<date>2019-07-27</date>
<content>回答提示：一般人回答这个问题过于平常，只说姓名、年龄、爱好、工作经验，这些在简历上都有。其实，企业最希望知道的...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8717]]></url>
<title> 两个字符串是否是变位词</title>
<date>2019-07-27</date>
<content>class Anagram: """ @:param s1: The first string @:param s2: The second string @:return true or false """ def Solution1(s1,s2): alist = list(s2) pos1 = 0 stillOK ...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8716]]></url>
<title>单链表逆置</title>
<date>2019-07-27</date>
<content>class Node(object): def __init__(self, data=None, next=None): self.data = data self.next = nextlink = Node(1, Node(2, Node(3, Node(4, Node(5, Node(6, Node(7, Nod...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8715]]></url>
<title>前序中序求后序</title>
<date>2019-07-27</date>
<content>推荐: http://blog.csdn.net/hinyunsin/article/details/6315502 def rebuild(pre, center): if not pre: return cur = Node(pre[0]) index = center.index(pre[0]) cur.l...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8714]]></url>
<title>求两棵树是否相同</title>
<date>2019-07-27</date>
<content>def isSameTree(p, q): if p == None and q == None: return True elif p and q : return p.val == q.val and isSameTree(p.left,q.left) and isSameTree(p.right,q.right) ...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8713]]></url>
<title>求最大树深</title>
<date>2019-07-27</date>
<content>def maxDepth(root): if not root: return 0 return max(maxDepth(root.left), maxDepth(root.right)) + 1...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8712]]></url>
<title>前中后序遍历</title>
<date>2019-07-27</date>
<content>深度遍历改变顺序就OK了 #coding:utf-8#二叉树的遍历#简单的二叉树节点类class Node(object): def __init__(self,value,left,right): self.value ...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8711]]></url>
<title>深度遍历</title>
<date>2019-07-27</date>
<content>def deep(root): if not root: return print root.data deep(root.left) deep(root.right)if __name__ == '__main__': lookup(tree) deep(tree)...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8710]]></url>
<title>二叉树节点</title>
<date>2019-07-27</date>
<content>class Node(object): def __init__(self, data, left=None, right=None): self.data = data self.left = left self.right = righttree = Node(1, Node(3, Node(7, Node(0)),...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8709]]></url>
<title>广度遍历和深度遍历二叉</title>
<date>2019-07-27</date>
<content>给定一个数组，构建二叉树，并且按层次打印这个二叉树...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8708]]></url>
<title>找零问题</title>
<date>2019-07-27</date>
<content>#coding:utf-8#values是硬币的面值values = [ 25, 21, 10, 5, 1]#valuesCounts 钱币对应的种类数#money 找出来的总钱数#coinsUsed 对应于目前钱币...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8707]]></url>
<title>快速排序</title>
<date>2019-07-27</date>
<content>#coding:utf-8def quicksort(list): if len(list) midpivot] finallylist = quicksort(lessbeforemidpivot)+[midpivot]+quicksort(biggerafterpivot) return finallylistpri...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8706]]></url>
<title>二分查找</title>
<date>2019-07-27</date>
<content>#coding:utf-8def binary_search(list, item): low = 0 high = len(list) - 1 while low item: high = mid - 1 elif guess 参考: http://blog.csdn.net/u013205877/articl...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8705]]></url>
<title>交叉链表求交点</title>
<date>2019-07-27</date>
<content>其实思想可以按照从尾开始比较两个链表，如果相交，则从尾开始必然一致，只要从尾开始比较，直至不一致的地方即为交叉...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8704]]></url>
<title>合并两个有序列表</title>
<date>2019-07-27</date>
<content>知乎远程面试要求编程 > 尾递归 def _recursion_merge_sort2(l1, l2, tmp): if len(l1) == 0 or len(l2) == 0: tmp.extend(l1) tmp.extend(l2) return tmp els...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8703]]></url>
<title>创建字典的方法</title>
<date>2019-07-27</date>
<content>1 直接创建 dict = {'name':'earth', 'port':'80'} 2 工厂方法 items=[('name','earth'),('port','80')]dict2=dict(items)dict1=dict((['name','earth'],['port','8...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8702]]></url>
<title>链表成对调换</title>
<date>2019-07-27</date>
<content>1->2->3->4 转换成 2->1->4->3 . class ListNode: def __init__(self, x): self.val = x self.next = Noneclass Solution: # @param a ListNode # @return a ListNode de...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8701]]></url>
<title>去除列表中的重复元素</title>
<date>2019-07-27</date>
<content>用集合 list(set(l)) 用字典 l1 = ['b','c','d','b','c','a','a']l2 = {}.fromkeys(l1).keys()print l2 用字典并保持顺序 l1 = ['b','c','d','b','c','a','a'...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8700]]></url>
<title>杨氏矩阵查找</title>
<date>2019-07-27</date>
<content>在一个m行n列二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8699]]></url>
<title>矩形覆盖</title>
<date>2019-07-27</date>
<content>我们可以用 2*1 的小矩形横着或者竖着去覆盖更大的矩形。请问用n个 2*1 的小矩形无重叠地覆盖一个 2*n 的大矩形，总共有多...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8698]]></url>
<title>变态台阶问题</title>
<date>2019-07-27</date>
<content>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 fib...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8697]]></url>
<title>台阶问题/斐波那契</title>
<date>2019-07-27</date>
<content>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 fib = lambda n: n if n 第二种记...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8696]]></url>
<title>unix进程间通信方式(IPC)</title>
<date>2019-07-27</date>
<content>1. 管道（Pipe） ：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。 2....</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8695]]></url>
<title> Ajax</title>
<date>2019-07-27</date>
<content>AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8694]]></url>
<title> HTTP1.0和HTTP1.1</title>
<date>2019-07-27</date>
<content>推荐: http://blog.csdn.net/elifefly/article/details/3964766 1. 请求头Host字段,一个服务器多个网站 2. 长链接 3. 文件断点续传 4. 身份认证...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8693]]></url>
<title>浏览器缓存</title>
<date>2019-07-27</date>
<content>推荐: http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html 304 Not Modified...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8692]]></url>
<title>socket</title>
<date>2019-07-27</date>
<content>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8691]]></url>
<title>c10k问题</title>
<date>2019-07-27</date>
<content>所谓c10k问题，指的是服务器同时支持成千上万个客户端的问题，也就是concurrent 10 000 connection（这也是c10k这个名字的由来）。...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8690]]></url>
<title>中间人攻击</title>
<date>2019-07-27</date>
<content>在GFW里屡见不鲜的,呵呵. 中间人攻击（Man-in-the-middle attack，通常缩写为MITM）是指攻击者与通讯的两端分别创建独立的联系，...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8689]]></url>
<title> CGI和WSGI</title>
<date>2019-07-27</date>
<content>CGI是通用网关接口，是连接web服务器和应用程序的接口，用户通过CGI来获取动态数据或文件等。 CGI程序是一个独立的程序，...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8688]]></url>
<title>SOAP</title>
<date>2019-07-27</date>
<content>RPC（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8687]]></url>
<title>RESTful架构(SOAP,RPC)</title>
<date>2019-07-27</date>
<content>越来越多的人开始意识到， 网站即软件 ，而且是一种新型的软件。 这种"互联网软件"采用客户端/服务器模式，建立在分布式...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8686]]></url>
<title>幂等 Idempotence</title>
<date>2019-07-27</date>
<content>HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的 副作用 。(注意是副作用) GET http://www.bank.com/account/123456 ，不...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8685]]></url>
<title>XSRF和XSS</title>
<date>2019-07-27</date>
<content>* CSRF(Cross-site request forgery)跨站请求伪造 * XSS(Cross Site Scripting)跨站脚本攻击 CSRF重点在请求,XSS重点在脚本...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8684]]></url>
<title>HTTP和HTTPS</title>
<date>2019-07-27</date>
<content>状态码 定义 1xx 报告 接收到请求，继续进程 2xx 成功 步骤成功接收，被理解，并被接受 3xx 重定向 为了完成请求,必须采取进...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8683]]></url>
<title>HTTP和HTTPS</title>
<date>2019-07-27</date>
<content>状态码 定义 1xx 报告 接收到请求，继续进程 2xx 成功 步骤成功接收，被理解，并被接受 3xx 重定向 为了完成请求,必须采取进...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8682]]></url>
<title>网站用户密码保存</title>
<date>2019-07-27</date>
<content>1. 明文保存 2. 明文hash后保存,如md5 3. MD5+Salt方式,这个salt可以随机 4. 知乎使用了Bcrypy(好像)加密...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8681]]></url>
<title>apache和nginx的区别</title>
<date>2019-07-27</date>
<content>nginx 相对 apache 的优点： * 轻量级，同样起web 服务，比apache 占用更少的内存及资源 * 抗并发，nginx 处理请求是异步非阻塞的...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8680]]></url>
<title> Cookie和Session</title>
<date>2019-07-27</date>
<content>Cookie Session 储存位置 客户端 服务器端 目的 跟踪会话，也可以保存用户偏好设置或者保存用户名密码等 跟踪会话 安全性 不...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8679]]></url>
<title>Post和Get</title>
<date>2019-07-27</date>
<content>事实上GET 和 POST 在实践上面有非常大的区别，这两种方法在语义上面并非能互相取代。 POST 是否比 GET 安全 是的， POST要比...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8678]]></url>
<title> urllib和urllib2的区别</title>
<date>2019-07-27</date>
<content>这个面试官确实问过,当时答的urllib2可以Post而urllib不可以. 1. urllib提供urlencode方法用来GET查询字符串的产生，而urllib2没有。这...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8677]]></url>
<title>ARP协议</title>
<date>2019-07-27</date>
<content>地址解析协议(Address Resolution Protocol)，其基本功能为透过目标设备的IP地址，查询目标的MAC地址，以保证通信的顺利进行。它...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8676]]></url>
<title>四次挥手</title>
<date>2019-07-27</date>
<content>_注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然._ 1. 客户端发送一个数据分段...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8675]]></url>
<title>三次握手</title>
<date>2019-07-27</date>
<content>1. 客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8674]]></url>
<title>MyISAM和InnoDB</title>
<date>2019-07-26</date>
<content>段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8673]]></url>
<title>VCC</title>
<date>2019-07-26</date>
<content>> ​ 全称是Multi-Version Concurrent Control，即多版本并发控制，在MVCC协议下，每个读操作会看到一个一致性的snapshot，并且可以实...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8672]]></url>
<title>乐观锁和悲观锁</title>
<date>2019-07-26</date>
<content>悲观锁： 假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作 乐观锁： 假设不会发生并发冲突，只在提交操作时检查...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8671]]></url>
<title>Redis原理</title>
<date>2019-07-26</date>
<content>Redis是什么？ 1. 是一个完全开源免费的key-value内存数据库 2. 通常被认为是一个数据结构服务器，主要是因为其有着丰富的数...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8670]]></url>
<title>数据库索引</title>
<date>2019-07-26</date>
<content>推荐: http://tech.meituan.com/mysql-index.html [MySQL索引背后的数据结构及算法原理](http://blog.codinglabs.org/articles/theory-of-mysql-index.html...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8669]]></url>
<title>事务</title>
<date>2019-07-26</date>
<content>数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。 彻底理...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8668]]></url>
<title> 程序编译与链接</title>
<date>2019-07-26</date>
<content>推荐: http://www.ruanyifeng.com/blog/2014/11/compiler.html Bulid过程可以分解为4个步骤:预处理(Prepressing), 编译(Compilation)、汇编(Assembly)、...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8667]]></url>
<title>死锁</title>
<date>2019-07-26</date>
<content>原因: 1. 竞争资源 2. 程序推进顺序不当 必要条件: 1. 互斥条件 2. 请求和保持条件 3. 不剥夺条件 4. 环路等待条件 处理死锁基...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8666]]></url>
<title>调度算法</title>
<date>2019-07-26</date>
<content>1. 先来先服务(FCFS, First Come First Serve) 2. 短作业优先(SJF, Shortest Job First) 3. 最高优先权调度(Priority Scheduling) 4. 时间片轮转(RR,...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8665]]></url>
<title>select,poll和epoll</title>
<date>2019-07-26</date>
<content>其实所有的I/O都是轮询的方法,只不过实现的层面不同罢了. 这个问题可能有点深入了,但相信能回答出这个问题是对I/O多路复...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8647]]></url>
<title>Python中重载</title>
<date>2019-07-25</date>
<content>引自知乎:http://www.zhihu.com/question/20053359 函数重载主要是为了解决两个问题。 1. 可变参数类型。 2. 可变参数个数。 另外，一...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8648]]></url>
<title>新式类和旧式类</title>
<date>2019-07-25</date>
<content>这个面试官问了,我说了老半天,不知道他问的真正意图是什么. 这篇文章很好的介绍了新式类的特性: http://www.cnblogs.com/btchen...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8664]]></url>
<title>range and xrange</title>
<date>2019-07-25</date>
<content>都在循环时使用，xrange内存性能更好。 for i in range(0, 20): for i in xrange(0, 20):...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8663]]></url>
<title>super init</title>
<date>2019-07-25</date>
<content>super() lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun ...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8662]]></url>
<title>Python2和3的区别</title>
<date>2019-07-25</date>
<content>推荐：[Python 2.7.x 与 Python 3.x 的主要差异](http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/)...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8661]]></url>
<title>read,readline和readlines</title>
<date>2019-07-25</date>
<content>* read 读取整个文件 * readline 读取下一行,使用生成器方法 * readlines 读取整个文件到一个迭代器以供我们遍历...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8660]]></url>
<title>Python的is</title>
<date>2019-07-25</date>
<content>is是对比地址,==是对比值...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8659]]></url>
<title>Python的List</title>
<date>2019-07-25</date>
<content>推荐: http://www.jianshu.com/p/J4U6rR 在Python中list特别有用。让我们来看下list的内部是如何实现的。 来看下面简单的程序，在list中...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8658]]></url>
<title>Python垃圾回收机制</title>
<date>2019-07-25</date>
<content>Python GC主要使用引用计数（reference counting）来跟踪和回收垃圾。在引用计数的基础上，通过“标记-清除”（mark and sweep）解决...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8657]]></url>
<title>Python里的拷贝</title>
<date>2019-07-25</date>
<content>引用和copy(),deepcopy()的区别 import copya = [1, 2, 3, 4, ['a', 'b']] #原始对象b = a #赋值，传对象的引用c = copy.copy(a) #对象拷贝，浅拷贝...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8656]]></url>
<title>Python函数式编程</title>
<date>2019-07-25</date>
<content>这个需要适当的了解一下吧,毕竟函数式编程在Python中也做了引用. 推荐: [酷壳](http://coolshell.cn/articles/10822.html) python中函数式...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8655]]></url>
<title>lambda函数</title>
<date>2019-07-25</date>
<content>其实就是一个匿名函数,为什么叫lambda?因为和后面的函数式编程有关. 推荐: [知乎](http://www.zhihu.com/question/20125256)...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8654]]></url>
<title>闭包</title>
<date>2019-07-25</date>
<content>闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。 当一个内...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8653]]></url>
<title>协程</title>
<date>2019-07-25</date>
<content>知乎被问到了,呵呵哒,跪了 简单点说协程是进程和线程的升级版,进程和线程都面临着内核态和用户态的切换问题而耗费许多...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8652]]></url>
<title>GIL线程全局锁</title>
<date>2019-07-25</date>
<content>线程全局锁(Global Interpreter Lock),即Python为了保证线程安全而采取的独立线程运行的限制,说白了就是一个核只能在同一时间运行...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8651]]></url>
<title>Python中的作用域</title>
<date>2019-07-25</date>
<content>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。 当 Python 遇到一个变量的话他会按照这样的顺序进行搜...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8650]]></url>
<title>单例模式</title>
<date>2019-07-25</date>
<content>> ​ 单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8649]]></url>
<title>__new__和__init__的区别</title>
<date>2019-07-25</date>
<content>这个 __new__ 确实很少见到,先做了解吧. 1. __new__ 是一个静态方法,而 __init__ 是一个实例方法. 2. __new__ 方法会返回一个创建的实...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8646]]></url>
<title>鸭子类型</title>
<date>2019-07-25</date>
<content>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。” 我们并不关心对象是...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8645]]></url>
<title>面向切面编程AOP和装饰器</title>
<date>2019-07-25</date>
<content>这个AOP一听起来有点懵,同学面阿里的时候就被问懵了... 装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/pythontiku/Pythonyuyantexing/暂无//8539.html]]></url>
<title>Python中的元类(metaclass)</title>
<date>2019-07-25</date>
<content>这个非常的不常用,但是像ORM这种复杂的结构还是会需要的,详情请看:http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/pythontiku/Pythonyuyantexing/暂无//8552.html]]></url>
<title>*args and **kwargs</title>
<date>2019-07-25</date>
<content>用`*args`和`**kwargs`只是为了方便并没有强制使用它们.当你不确定你的函数里将要传递多少参数时你可以用`*args`.例如,它可以传...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/pythontiku/Pythonyuyantexing/暂无//8548.html]]></url>
<title>字符串格式化:%和.format</title>
<date>2019-07-25</date>
<content>" .format在许多方面看起来更便利.对于`%`最烦人的是它无法同时传递一个变量和元组.你可能会想下面的代码不会有什么问题...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/pythontiku/Pythonyuyantexing/暂无//8545.html]]></url>
<title>Python中单下划线和双下划</title>
<date>2019-07-25</date>
<content>" class MyClass(): def __init__(self): self.__superprivate = ""Hello"" self._semiprivate = "", world!"" mc = MyClass() print mc.__superprivateTraceback (most rec...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/pythontiku/Pythonyuyantexing/暂无//8541.html]]></url>
<title>类变量和实例变量</title>
<date>2019-07-25</date>
<content>是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/pythontiku/Pythonyuyantexing/暂无//8540.html]]></url>
<title> @staticmethod和@classmethod</title>
<date>2019-07-25</date>
<content>" Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下: def foo(x): print ""executing foo(%s)""%(x)class A(object...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/pythontiku/Pythonyuyantexing/暂无//8538.html]]></url>
<title>Python的函数参数传递</title>
<date>2019-07-25</date>
<content>" 看两个例子: a = 1def fun(a): a = 2fun(a)print a # 1 a = []def fun(a): a.append(1)fun(a)print a # [1] 所有的变量都可以理解是内存中一个对象的...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/pythontiku/Pythonyuyantexing/暂无//8542.html]]></url>
<title>Python自省</title>
<date>2019-07-25</date>
<content>这个也是python彪悍的特性. 自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/pythontiku/Pythonyuyantexing/暂无//8544.html]]></url>
<title>字典推导式</title>
<date>2019-07-25</date>
<content>可能你见过列表推导时,却没有见过字典推导式,在2.7中才加入的: d = {key: value for (key, value) in iterable}...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/inter/pythontiku/Pythonyuyantexing/暂无//8549.html]]></url>
<title>迭代器和生成器</title>
<date>2019-07-25</date>
<content>" 这个是stackoverflow里python排名第一的问题,值得一看: http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python 这是中文...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8537]]></url>
<title>测试多选</title>
<date>2019-07-25</date>
<content>A,C...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6403]]></url>
<title>Python 中布尔的两个值是</title>
<date>2019-07-20</date>
<content>def power(base, exponent): if equal_zero(base) and exponent 0: raise ZeroDivisionError ret = power_value(base, abs(exponent)) if exponent 0: return 1.0 / ret els...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=8536]]></url>
<title>数值的整数次方</title>
<date>2019-07-19</date>
<content>要求：求一个数的整数次方 思路：需要考虑次方是正数、负数和0，基数是0 浮点数相等不能直接用==...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/tiku/jquerytiku/narongyushuxing/暂无//8466.html]]></url>
<title>下列哪些是html属性</title>
<date>2019-07-17</date>
<content>A,D...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/tiku/jquerytiku/narongyushuxing/暂无//8470.html]]></url>
<title>填写空白以将</title>
<date>2019-07-17</date>
<content>$(function(){ $([space]).[space](b你好/b)})...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/tiku/jquerytiku/narongyushuxing/暂无//8469.html]]></url>
<title>这段代码的输出是什么？</title>
<date>2019-07-17</date>
<content>div id =test p p / p / div script alert（$（＃test）。text（））/ script...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/a/ITrumen/jqueryjiaocheng/shuxinghenarong/暂无//8488.html]]></url>
<title>获取设置内容</title>
<date>2019-07-17</date>
<content>8444,8469,8445,8470...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6870]]></url>
<title>列表渲染</title>
<date>2019-07-14</date>
<content>我们用 v-for 指令根据一组数组的选项列表进行渲染。v-for 指令需要使用 item in items 形式的特殊语法，items 是源数据数组并且...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6860]]></url>
<title>属性绑定</title>
<date>2019-07-14</date>
<content>给html标签绑定一个属性值应该使用 v-bind:属性名称 以下代码给h1绑定一个新的id和title属性 我是一行快乐的标题 渲染结果是：...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6884]]></url>
<title>列表渲染</title>
<date>2019-07-14</date>
<content>我们用 v-for 指令根据一组数组的选项列表进行渲染。v-for 指令需要使用 item in items 形式的特殊语法，items 是源数据数组并且...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=2]]></url>
<title>欢迎您来到python的世界</title>
<date>2019-07-10</date>
<content>Python是一种高级编程语言，在许多领域中有应用，包括Web编程、脚本编写、科学计算和人工智能。 它很受欢迎，并被组织使...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6700]]></url>
<title>写入字节数</title>
<date>2019-07-10</date>
<content>如果成功，则write方法返回写入文件的字节数。 msg = Hello world!file = open(newfile.txt, w)amount_written = file.write(msg)print(amount_written)...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6815]]></url>
<title>写入文件</title>
<date>2019-07-10</date>
<content>6698,6536,6699,6537,6670,6538...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6699]]></url>
<title>写入</title>
<date>2019-07-09</date>
<content>当文件以写模式打开时，文件的已有内容被删除 file = open(newfile.txt, r)print(初始化读写内容)print(file.read())print(完成)file.close(...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=44]]></url>
<title>这个代码的输出是什么？</title>
<date>2019-07-09</date>
<content>pre class=brush:python;toolbar:false; int（3+4） /pre...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=43]]></url>
<title>类型转换</title>
<date>2019-07-09</date>
<content>在python中，单个的数据类型不可能完成某些操作。例如，您不能添加两个包含数字2和3的字符串来生成整数5，因为操作将在字...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=14]]></url>
<title>0不能做除数</title>
<date>2019-07-09</date>
<content>任何书除以0在python中会产生错误 >>> 11 / 0Traceback (most recent call last): File " ", line 1, in ZeroDivisionError: division by zero 在Python中，错...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6418]]></url>
<title>填空 创建一个循环让x以</title>
<date>2019-07-09</date>
<content>x = 0 [space] x =20[space] [space](x) x += 2...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6487]]></url>
<title>while运算符</title>
<date>2019-07-09</date>
<content>6460,6418,6461,6462,6419,6463,6420...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6417]]></url>
<title>多少个数字将会被打印?</title>
<date>2019-07-09</date>
<content>i = 3 while i=0: print(i) i = i - 1 [space]...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6415]]></url>
<title>这段代码的运行结果是？</title>
<date>2019-07-09</date>
<content>x = 4y = 2 if not 1 + 1 == y or x == 4 and 7 == 8: print(Yes) elif x y: print(No)...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6458]]></url>
<title>符号优先级别</title>
<date>2019-07-09</date>
<content>算符优先是编程中的一个非常重要的概念。它是运算顺序的数学思想（先乘除后加减）的扩展，包括其他运算符，例如布尔逻...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6486]]></url>
<title>运算符优先级</title>
<date>2019-07-09</date>
<content>6458,6459,6417...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6485]]></url>
<title>布尔运算</title>
<date>2019-07-09</date>
<content>6455,6412,6456,6413,6457,6414...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6412]]></url>
<title>这段代码的输出结果是？</title>
<date>2019-07-09</date>
<content>if (1 == 1) and (2 + 2 3): print(true) else: print(false)...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6]]></url>
<title>我的第一个python程序</title>
<date>2019-07-09</date>
<content>让我们从创建一个显示Hello World的小程序开始。。 在python中，我们使用打印语句输出文本： print(Hello world!)Hello world!...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6423]]></url>
<title>填空,创建列表并打印它的</title>
<date>2019-07-09</date>
<content>list = [space] 42, 55, 67] print(list[[space]])...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6499]]></url>
<title>填充空白以定义一个函数</title>
<date>2019-07-09</date>
<content>[space]print_mult(x, y)[space] print(x * [space])...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6801]]></url>
<title>函数参数</title>
<date>2019-07-09</date>
<content>6664,6498,6665,6499,6666,6500...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6800]]></url>
<title>function 函数</title>
<date>2019-07-09</date>
<content>6664,6496,6665,6497...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6664]]></url>
<title>  Functions-调用顺序</title>
<date>2019-07-09</date>
<content>必须在调用函数之前定义函数，就像在使用它们之前必须指定变量一样。 以下为错误示例: hello()def hello(): print(Hello world!)Tr...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=13]]></url>
<title>- 减号运算符</title>
<date>2019-07-09</date>
<content>负号表示负数。 运算是在负数上执行的，就像在正整数上一样。 -7-7 (-7 + 2) * (-4)20 加号也可以放在数字前面，但这没有效果...</content>
</display>
</item>
<item>
<key></key> 
<display>
<url><![CDATA[/plus/view.php?aid=6524]]></url>
<title>创建一个try/except/finally 代</title>
<date>2019-07-09</date>
<content>[space]: print(1) [space]: print(2) [space]: print(42)...</content>
</display>
</item>

</document>